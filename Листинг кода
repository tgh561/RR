def read_matrix_from_file(filename):
    with open(filename, 'r') as file:
        lines = file.readlines()
        matrix = [line.strip().split() for line in lines]
    return matrix

# Ввод количества вершин и рёбер графа
n_v = int(input("Введите количество вершин в графе: "))
n_e = int(input("Введите количество рёбер в графе: "))
abc = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
sl = {}

# Создание словаря для обозначения вершин буквами
for i in range(1, n_v + 1):
    sl[i] = abc[i - 1]

# Чтение матрицы инцидентности из файла
matrix_file = input("Введите путь к файлу: ")
matr = read_matrix_from_file(matrix_file)

# Выводим матрицу инцидентности для проверки
print("Матрица инцидентности:")
for row in matr:
    print(" ".join(row))

# Преобразование матрицы в список рёбер
edges = []
w=1
for j in range(n_e):
    verts = [i for i in range(n_v) if matr[i][j] == '1']
    if len(verts) == 2:
        u, v = verts
        edges.append((w, u + 1, v + 1))
        w+=1
# Вывод всех рёбер графа
print("Все рёбра графа:")
for w, u, v in edges:
    print(f"{sl[u]} - {sl[v]}")

# Реализация алгоритма Краскала

# Сортировка рёбер по весу
sorted_edges = sorted(edges, key=lambda x: x[0])

# Инициализация структур данных для хранения MST и групп
connected = set()
groups = {}
mst = []

# Обработка рёбер и объединение вершин
for r in sorted_edges:
    if r[1] not in connected or r[2] not in connected:
        if r[1] not in connected and r[2] not in connected:
            groups[r[1]] = [r[1], r[2]]
            groups[r[2]] = groups[r[1]]
        else:
            if not groups.get(r[1]):
                groups[r[2]].append(r[1])
                groups[r[1]] = groups[r[2]]
            else:
                groups[r[1]].append(r[2])
                groups[r[2]] = groups[r[1]]

        mst.append(r)
        connected.add(r[1])
        connected.add(r[2])

# Объединение разрозненных групп, если они соединены ребром
for r in sorted_edges:
    if r[2] not in groups[r[1]]:
        mst.append(r)
        gr1 = groups[r[1]]
        groups[r[1]] += groups[r[2]]
        groups[r[2]] += gr1

# Вычисление и вывод удалённых рёбер
all_edges_set = set((u, v) for w, u, v in sorted_edges)
mst_edges_set = set((u, v) for w, u, v in mst)
removed_edges = all_edges_set - mst_edges_set

print("Удалённые рёбра:")
for u, v in removed_edges:
    print(f"{sl[u]} - {sl[v]}")

# Вывод рёбер минимального остовного дерева
print("Рёбра минимального остова:")
for w, u, v in mst:
    print(f"{sl[u]} - {sl[v]}")
